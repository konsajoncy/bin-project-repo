#include <avr/io.h>
#define F_CPU 8000000L
#include <util/delay.h>
//#define CMP_REGISTER (F_CPU/(1000L*64)) //normalnie
#define CMP_REGISTER (F_CPU/(1000L*256)) //do ultradzwiekow
#include <avr/interrupt.h>
#include <stdlib.h>
#include <stdio.h>

struct menu
{
struct menu *g,*l,*p,*d;

char *n;

void (*f)(int);

int period;
};

void fun(int n);
void pwm(int n);

struct menu M0,M1,M2,M3,M00,M01,M02,M10,M11,M20,M21,M30,M31,M010,M011,M012;

struct menu M0={NULL,NULL,&M1,&M00,"M0",NULL,0};
struct menu M00={&M0,NULL,&M01,NULL,"M00",NULL,0};
struct menu M01={&M0,&M00,&M02,&M010,"M01",NULL,0};
struct menu M02={&M0,&M01,NULL,NULL,"M02",NULL,0};

struct menu M010={&M01,&M012,&M011,NULL,"M010",&fun,10000};
struct menu M011={&M01,&M010,&M012,NULL,"M011",&pwm,10000};
struct menu M012={&M01,&M011,&M010,NULL,"M012",NULL,0};
struct menu M1={&M0,&M0,&M2,&M10,"M1",NULL,0};

struct menu M10={&M1,&M11,&M11,NULL,"M10",NULL,0};
struct menu M11={&M1,&M10,&M10,NULL,"M11",NULL,0};
struct menu M2={&M0,&M1,&M3,&M20,"M2",NULL,0};
struct menu M20={&M2,&M21,&M21,NULL,"M20",NULL,0};

struct menu M21={&M2,&M20,&M20,NULL,"M21",NULL,0};
struct menu M3={&M0,&M2,&M0,&M30,"M3",NULL,0};
struct menu M30={&M3,&M31,&M31,NULL,"M30",NULL,0};
struct menu M31={&M3,&M30,&M30,NULL,"M31",NULL,0};


int zmienna=0;
unsigned char k[4];
int n=0;
unsigned char LED_TAB[4];
unsigned char LED_N[11];
volatile int echo;

struct pole_bitowe
{
	volatile	uint8_t :4;
	volatile	unsigned char przyciski:4;
};

struct lcds
{
	volatile	uint8_t rs:1;
	volatile	uint8_t :1;
	volatile	uint8_t en:1;
	volatile	uint8_t :1;
	volatile	uint8_t d:4;
};

#define lcd_rs (((struct lcds*)&PORTB)->rs)
#define lcd_rs_dir (((struct lcds*)&DDRB)->rs)

#define lcd_en (((struct lcds*)&PORTB)->en)
#define lcd_en_dir (((struct lcds*)&DDRB)->en)

#define lcd_data (((struct lcds*)&PORTA)->d)
#define lcd_data_dir (((struct lcds*)&DDRA)->d)


#define keyh ((struct pole_bitowe*)&PIND)->przyciski
#define keyh_dir ((struct pole_bitowe*)&DDRD)->przyciski
#define keyh_pullup ((struct pole_bitowe*)&PORTD)->przyciski
uint8_t keyl;

volatile unsigned char key=255;

char * lcd_buff;
volatile unsigned char lcd_buff_full=0;

struct menu *menuptr;
volatile int runme=0;

void LedTrg(void) {

	PORTB ^= 0x02;
}

void lcd_write(uint8_t d, uint8_t rs)
{
lcd_rs=rs;
lcd_en=1;
lcd_data=d>>4;
lcd_en=0;

lcd_en=1;
lcd_data=d;
lcd_en=0;
}

static int kierunek = 0;

ISR(TIMER2_COMP_vect) //obsluga przerwania od TIMER2
{
	unsigned char tmpD=0;
	static unsigned char keycnt=0;
	static unsigned char keylev=0;
	static unsigned char keyr;

	static unsigned char lcd_cnt=0;
	static unsigned char lcd_r=0;

	static unsigned char menu_cnt=0;

//pomiar odleglosci :)
	if(PINA & (1<<PA1))
			echo++;

//kluczowanie tranzystorow
	switch(zmienna){
		case 0:
				tmpD=(unsigned char)~(0x08);
				PORTC=LED_N[k[0]]; 
				zmienna=1;
				break;
		case 1:
				tmpD=(unsigned char)~(0x04);
				PORTC=LED_N[k[1]]; 
				zmienna=2;
				break;
		case 2:
				tmpD=(unsigned char)~(0x02);
				PORTC=LED_N[k[2]]; 
				zmienna=3;
				break;
		case 3:
				tmpD=(unsigned char)~(0x01);
				PORTC=LED_N[k[3]]; 
				zmienna=0;
				break;
			}
	PORTD= (PORTD |0x0F ) & tmpD;

//na LCD
	if(lcd_cnt==0 && lcd_buff_full==1)
	{
		switch(lcd_buff[lcd_r])
		{	case 0: lcd_r=0;
					lcd_buff_full=0;
					break;
			case 1: lcd_r++;
					lcd_write(lcd_buff[lcd_r],0);
					lcd_r++;
					break;
			case 4: lcd_r++;
					lcd_cnt=lcd_buff[lcd_r];
					lcd_r++;
					break;
			default: lcd_write(lcd_buff[lcd_r],1);
					lcd_r++;
					break;
		}
	}
		if(lcd_cnt>0)
			lcd_cnt--;

//eliminacja drgania stykow
	if(keycnt==0)
	{
		switch(keylev)
		{
			case 0:
				if(keyh!=15)
				{
					keyr=keyh;
					keycnt=50;
					keylev=1;
				}
			break;
			case 1:
				if(keyh==keyr)
				{
					LedTrg();
					key=~(keyr|0xF0);
				}
				keylev=2;
			break;
			case 2:
				if(keyh==15)
				{keylev=0;}
			break;
		}
	}
	if(keycnt>0){
	keycnt--;}


	if((menuptr->period)!=0)
		{
		if(menu_cnt==(menuptr->period))
			{
			runme=1;
			menu_cnt=0;
			}
		else
			{
			//menu_cnt=menu_cnt+1;
			//PORTA++;
			}
		}
}

volatile int ml=0;
volatile int krok=0;

void Led_update(int n){
	if(n>=400){
		k[0]=10;
		k[1]=10;
		k[2]=10;
		k[3]=10;
	}
	else {
		k[0]=(n%10000-n%1000)/1000;
		k[1]=(n%1000-n%100)/100;
		k[2]=(n%100-n%10)/10;
		k[3]=n%10;
	}
}

void InitTimer2(void)
{
	//OCR2=CMP_REGISTER; //normalnie
	OCR2=CMP_REGISTER-1; //do ultradzwiekow
	TCCR2= (1<<WGM21) | (1<<CS22);
	TIMSK= (1<<OCIE2); //zezwolenie na przerwania
}

void PWM_init(void){ //z timer0
	TCCR0|=(1<<COM01)|(1<<WGM01)|(1<<WGM00)|(1<<CS00);
}

volatile int SL2=2;
volatile int SL3A=2;
volatile int SL3B=2;

//typ zmiennych do ustalenia
int odleglosc=0;
int echo_cnt=0;
int error_cnt=0;

//mozna cos tu pozmieniac
void zmierz_zapelnienie(void)
{
	echo_cnt=0;
	error_cnt=0;
	while(echo_cnt<=100){
		echo=0;
		PORTA|=(1<<PA0);
		_delay_us(10);
		PORTA&=~(1<<PA0);
		_delay_ms(50);
		if(echo>=400){
			error_cnt++;
		}
		odleglosc=odleglosc+4*echo;
		echo_cnt++;
	}
	if((error_cnt>=10)&(error_cnt<=50)){ //do powtorzenia (cos zeby nie utknal w nieskonczonej petli)
		zmierz_zapelnienie();
	}
	else if((error_cnt>50)){//ile errorow uznac za przekroczenie zakresu a nie blad?
		odleglosc=500;
	}
	else{
		odleglosc=odleglosc/100;
	}
}

void fun(int n)
{
switch(n)
	{
case 3:
	{
		sprintf(lcd_buff,"\001\001\004\x62\001\xc8\004\x62O=%d",krok);
	}
	break;
case 0:
	{if(key!=0)
			{
				switch(key)
				{
					case 8:
							ml--;
							if(ml==0)
							{key=255;}
							break;

					case 4:
							if(ml==1)
							{SL2--;
							break;}
							if(ml==2)
							{SL3A--;
							break;}
							if(ml>=3)
							{SL3B--;
							break;}

					case 2:
							if(ml==1)
							{SL2++;
							break;}
							if(ml==2)
							{SL3A++;
							break;}
							if(ml>=3)
							{SL3B++;
							break;}

					case 1:
							ml++;
							break;
				}
				if(key!=255)
				{
			  	sprintf(lcd_buff,"\001\001\004\x62\001\x0C\004\x62\L2=%d\004\x62\001\x8b\004\x62\L3A=%d\004\x62\001\xc0\004\x62\L3B=%d\004\x62\001%c\004\x62\001\x0d\004\x62",SL2,SL3A,SL3B,0x80+(ml==1?3:ml==2?15:ml==3?68:0));
				lcd_buff_full=1;
				key=0;
				}
			}
	break;
	}
	}
}

void pwm(int n){
	switch(n){
	case 0:{
		if(key!=0){
				switch(key){
						case 8:
								ml--;
								if(ml==0)
								{OCR0=0;
								key=255;}
								break;

						case 4:
								if(ml==1){
								OCR0=OCR0-100;
								break;}
								if(ml==2){
								OCR0=OCR0-10;
								break;}
								if(ml==3){
								OCR0--;
								break;}

						case 2:
								if(ml==1){
								OCR0=OCR0+100;
								break;}
								if(ml==2){
								OCR0=OCR0+10;
								break;}
								if(ml==3){
								OCR0++;
								break;}

						case 1:
								ml++;
								if(ml>=3)
									ml=3;
								break;
					}
					if(key!=255)
					{
				  	sprintf(lcd_buff,"\001\001\004\x62\001\x0C\004\x62\PWM(0-255) = %d%d%d\004\x62\001%c\004\x62\001\x0d",(OCR0%1000-OCR0%100)/100,(OCR0%100-OCR0%10)/10,OCR0%10,0x80+(ml==1?13:ml==2?14:ml==3?15:0));
					lcd_buff_full=1;
					key=0;
					}
				}
	break;
	}
case 1:{
	switch(kierunek){
			case 0:
				OCR0++;
				if(OCR0>=255) 	kierunek=1;
				break;
			case 1:
				OCR0--;
				if(OCR0<=0) 	kierunek=0;
				break;
			}
	if(key==8){
		ml=0;
		OCR0=0;
		key=255;
	}
	break;
}
}
}

int main(void)
{
	InitTimer2();
	PWM_init();

	menuptr=&M0;

	DDRB=0x08;
	DDRD=0x0F;

	PORTD=0xFF;
	PORTB &= 0xF7;
	OCR0=0;

	lcd_rs_dir=1;
	lcd_en_dir=1;
	lcd_data_dir=15;

	keyh_dir=0x0;
	keyh_pullup=0xF;

	lcd_rs_dir=1;
	lcd_en_dir=1;
	lcd_data_dir=15;

	lcd_buff=malloc(80);

	DDRC=0xFF;
	PORTC=0xFF;

	LED_N[0]=0xC0; //wypisz 0
	LED_N[1]=0xF9; //wypisz 1
	LED_N[2]=0xA4; //wypisz 2
	LED_N[3]=0xB0; //wypisz 3
	LED_N[4]=0x99; //wypisz 4
	LED_N[5]=0x92; //wypisz 5
	LED_N[6]=0x82; //wypisz 6
	LED_N[7]=0xF8; //wypisz 7
	LED_N[8]=0x80; //wypisz 8
	LED_N[9]=0x90; //wypisz 9
	LED_N[10]=0x86; //wypisz error

	DDRA|=(1<<PA0); // ultradzwiek TRIG
	DDRA&=~(1<<PA1); // wejscie ultradzwiek ECHO
	PORTA|=(1<<PA1); // pull up ECHO

	sei();

	sprintf(lcd_buff,"\004\x62\001\x28\004\x62\001\x0C\004\x62\001\x06\004\x62\001\x01\004\x62");

	lcd_buff_full=1;

	_delay_ms(1000);

	while(1)
	{

		if(key!=0){
		zmierz_zapelnienie();
		Led_update(odleglosc);
		}

		/*Led_update(n++);
		if(n>=9999)
			{
				n=0;
			}*/

		if(ml==0)
		{
		if(key!=0)
		{
			switch(key)
			{
				case 8:
						if(menuptr->g!=NULL)
						menuptr=menuptr->g;
						OCR0=255;
						_delay_ms(2);
						OCR0=0;
						break;
				case 4:
						if(menuptr->l!=NULL)
						menuptr=menuptr->l;
						OCR0=255;
						_delay_ms(2);
						OCR0=0;
						break;
				case 2:
						if(menuptr->p!=NULL)
						menuptr=menuptr->p;
						OCR0=255;
						_delay_ms(2);
						OCR0=0;
						break;
				case 1:
						if(menuptr->d!=NULL)
						menuptr=menuptr->d;
						else if(menuptr->f!=NULL)
						{ml=1;
						key=254;}
						OCR0=255;
						_delay_ms(2);
						OCR0=0;
						break;
			}
			if(key!=254)
			{
			sprintf(lcd_buff, "\001\001\004\x62%s",menuptr->n);
			lcd_buff_full=1;
			key=0;
			}
		}
		}
		else
		{
			if(runme==1)
				{
				(*menuptr->f)(3);
				krok=krok+1;
				if (krok>=9){
					krok=9;
				}
				//PORTA++;
				runme=0;
				}
			else
				{
				(*menuptr->f)(0);
				}
		}
		_delay_us(800);
	}
}